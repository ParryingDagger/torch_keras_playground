{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\">\n",
    "    </a>\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Convolutional Neural Network with Batch-Normalization </h1> \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Objective<h3>    \n",
    "<h5>Learn how to compare a Convolutional Neural Network using Batch Normalization with a regular Convolutional Neural Network  to classify handwritten digits from the MNIST database.</h5>     \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Table of Contents</h2>\n",
    "<b>This lab takes a long time to run so the results are given. You can run the notebook your self but it may take a long time.</b>\n",
    "<p>In this lab, we will compare a Convolutional Neural Network using Batch Normalization with a regular Convolutional Neural Network  to classify handwritten digits from the MNIST database. We will reshape the images to make them faster to process. </p>\n",
    "\n",
    "<ul>\n",
    "    <li><a href=\"#read_me\">Read me Batch Norm for Convolution Operation  </a></li>\n",
    "<li><a href=\"#Makeup_Data\">Get Some Data</a></li>\n",
    "<li><a href=\"#CNN\">Two Types of Convolutional Neural Network</a></li>\n",
    "<li><a href=\"#Train\">Define Criterion function, Optimizer and Train the Model</a></li>\n",
    "<li><a href=\"#Result\">Analyze Results</a></li>\n",
    "</ul>\n",
    "<p>Estimated Time Needed: <strong>25 min</strong></p>\n",
    "\n",
    "<hr>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"read_me\"><h2 id=\"read_me\">Read me Batch Norm for Convolution Operation  </h2></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Like a fully connected network, we create a <code>BatchNorm2d</code> object, but we apply it to the 2D convolution object. First, we create objects <code>Conv2d</code> object; we require the number of output channels, specified by the variable <code>OUT</code>.  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<code>self.cnn1 = nn.Conv2d(in_channels=1, out_channels=OUT, kernel_size=5, padding=2) </code>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then create a Batch Norm  object for 2D convolution as follows:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<code>self.conv1_bn = nn.BatchNorm2d(OUT)</code>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameter out is the number of channels in the output. We can then apply batch norm  after  the convolution operation :\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<code>x = self.cnn1(x)</code>\n",
    " <code> x=self.conv1_bn(x)</code>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!--Empty Space for separating topics-->\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Preparation</h2>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting torchvision==0.9.1\n",
      "  Downloading torchvision-0.9.1-cp37-cp37m-manylinux1_x86_64.whl (17.4 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.4/17.4 MB\u001b[0m \u001b[31m65.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hCollecting torch==1.8.1\n",
      "  Downloading torch-1.8.1-cp37-cp37m-manylinux1_x86_64.whl (804.1 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m804.1/804.1 MB\u001b[0m \u001b[31m583.0 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: numpy in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from torchvision==0.9.1) (1.21.6)\n",
      "Requirement already satisfied: pillow>=4.1.1 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from torchvision==0.9.1) (8.1.0)\n",
      "Requirement already satisfied: typing-extensions in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from torch==1.8.1) (4.5.0)\n",
      "Installing collected packages: torch, torchvision\n",
      "  Attempting uninstall: torch\n",
      "    Found existing installation: torch 1.13.1+cpu\n",
      "    Uninstalling torch-1.13.1+cpu:\n",
      "      Successfully uninstalled torch-1.13.1+cpu\n",
      "  Attempting uninstall: torchvision\n",
      "    Found existing installation: torchvision 0.14.1+cpu\n",
      "    Uninstalling torchvision-0.14.1+cpu:\n",
      "      Successfully uninstalled torchvision-0.14.1+cpu\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "torchaudio 0.13.1+cpu requires torch==1.13.1, but you have torch 1.8.1 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed torch-1.8.1 torchvision-0.9.1\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Import the libraries we need to use in this lab\n",
    "\n",
    "# Using the following line code to install the torchvision library\n",
    "# !mamba install -y torchvision\n",
    "\n",
    "!pip install torchvision==0.9.1 torch==1.8.1 \n",
    "import torch \n",
    "import torch.nn as nn\n",
    "import torchvision.transforms as transforms\n",
    "import torchvision.datasets as dsets\n",
    "import matplotlib.pylab as plt\n",
    "import numpy as np\n",
    "def show_data(data_sample):\n",
    "    plt.imshow(data_sample[0].numpy().reshape(IMAGE_SIZE, IMAGE_SIZE), cmap='gray')\n",
    "    plt.title('y = '+ str(data_sample[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"Makeup_Data\"><h2 id=\"Makeup_Data\">Get the Data</h2> </a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a transform to resize the image and convert it to a tensor :\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "IMAGE_SIZE = 16\n",
    "\n",
    "composed = transforms.Compose([transforms.Resize((IMAGE_SIZE, IMAGE_SIZE)), transforms.ToTensor()])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the training dataset by setting the parameters <code>train </code> to <code>True</code>. We use the transform defined above.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "train_dataset = dsets.MNIST(root='./data', train=True, download=True, transform=composed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the testing dataset by setting the parameters train  <code>False</code>.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make the validating \n",
    "\n",
    "validation_dataset = dsets.MNIST(root='./data', train=False, download=True, transform=composed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the data type is long.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the data type for each element in dataset\n",
    "\n",
    "type(train_dataset[0][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each element in the rectangular tensor corresponds to a number representing a pixel intensity as demonstrated by the following image.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DL0110EN/notebook_images%20/chapter%206/6.2.1imagenet.png\" width=\"550\" alt=\"MNIST data image\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Print out the fourth label \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The label for the fourth data element\n",
    "\n",
    "train_dataset[3][1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the fourth sample \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The image for the fourth data element\n",
    "show_data(train_dataset[3])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fourth sample is a \"1\".\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!--Empty Space for separating topics-->\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"CNN\"><h2 id=\"CNN\">Build a Two Convolutional Neural Network Class</h2></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build a Convolutional Network class with two Convolutional layers and one fully connected layer. Pre-determine the size of the final output matrix. The parameters in the constructor are the number of output channels for the first and second layer.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CNN(nn.Module):\n",
    "    \n",
    "    # Contructor\n",
    "    def __init__(self, out_1=16, out_2=32):\n",
    "        super(CNN, self).__init__()\n",
    "        self.cnn1 = nn.Conv2d(in_channels=1, out_channels=out_1, kernel_size=5, padding=2)\n",
    "        self.maxpool1=nn.MaxPool2d(kernel_size=2)\n",
    "\n",
    "        self.cnn2 = nn.Conv2d(in_channels=out_1, out_channels=out_2, kernel_size=5, stride=1, padding=2)\n",
    "        self.maxpool2=nn.MaxPool2d(kernel_size=2)\n",
    "        self.fc1 = nn.Linear(out_2 * 4 * 4, 10)\n",
    "    \n",
    "    # Prediction\n",
    "    def forward(self, x):\n",
    "        x = self.cnn1(x)\n",
    "        x = torch.relu(x)\n",
    "        x = self.maxpool1(x)\n",
    "        x = self.cnn2(x)\n",
    "        x = torch.relu(x)\n",
    "        x = self.maxpool2(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.fc1(x)\n",
    "        return x\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build a Convolutional Network class with two Convolutional layers and one fully connected layer. But we add Batch Norm for the convolutional layers. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CNN_batch(nn.Module):\n",
    "    \n",
    "    # Contructor\n",
    "    def __init__(self, out_1=16, out_2=32,number_of_classes=10):\n",
    "        super(CNN_batch, self).__init__()\n",
    "        self.cnn1 = nn.Conv2d(in_channels=1, out_channels=out_1, kernel_size=5, padding=2)\n",
    "        self.conv1_bn = nn.BatchNorm2d(out_1)\n",
    "\n",
    "        self.maxpool1=nn.MaxPool2d(kernel_size=2)\n",
    "        \n",
    "        self.cnn2 = nn.Conv2d(in_channels=out_1, out_channels=out_2, kernel_size=5, stride=1, padding=2)\n",
    "        self.conv2_bn = nn.BatchNorm2d(out_2)\n",
    "\n",
    "        self.maxpool2=nn.MaxPool2d(kernel_size=2)\n",
    "        self.fc1 = nn.Linear(out_2 * 4 * 4, number_of_classes)\n",
    "        self.bn_fc1 = nn.BatchNorm1d(10)\n",
    "    \n",
    "    # Prediction\n",
    "    def forward(self, x):\n",
    "        x = self.cnn1(x)\n",
    "        x=self.conv1_bn(x)\n",
    "        x = torch.relu(x)\n",
    "        x = self.maxpool1(x)\n",
    "        x = self.cnn2(x)\n",
    "        x=self.conv2_bn(x)\n",
    "        x = torch.relu(x)\n",
    "        x = self.maxpool2(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.fc1(x)\n",
    "        x=self.bn_fc1(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Function to train the model \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(model,train_loader,validation_loader,optimizer,n_epochs=4):\n",
    "    \n",
    "    #global variable \n",
    "    N_test=len(validation_dataset)\n",
    "    accuracy_list=[]\n",
    "    loss_list=[]\n",
    "    for epoch in range(n_epochs):\n",
    "        for x, y in train_loader:\n",
    "            model.train()\n",
    "            optimizer.zero_grad()\n",
    "            z = model(x)\n",
    "            loss = criterion(z, y)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            loss_list.append(loss.data)\n",
    "\n",
    "        correct=0\n",
    "        #perform a prediction on the validation  data  \n",
    "        for x_test, y_test in validation_loader:\n",
    "            model.eval()\n",
    "            z = model(x_test)\n",
    "            _, yhat = torch.max(z.data, 1)\n",
    "            correct += (yhat == y_test).sum().item()\n",
    "        accuracy = correct / N_test\n",
    "        accuracy_list.append(accuracy)\n",
    "     \n",
    "    return accuracy_list, loss_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"Train\"><h2 id=\"Train\">Define the Convolutional Neural Network Classifier, Criterion function, Optimizer and Train the Model</h2> </a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 16 output channels for the first layer, and 32 output channels for the second layer \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the model object using CNN class\n",
    "model = CNN(out_1=16, out_2=32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the loss function, the optimizer and the dataset loader \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()\n",
    "learning_rate = 0.1\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr = learning_rate)\n",
    "train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=100)\n",
    "validation_loader = torch.utils.data.DataLoader(dataset=validation_dataset, batch_size=5000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train the model and determine validation accuracy technically test accuracy **(This may take a long time)**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train the model\n",
    "accuracy_list_normal, loss_list_normal=train_model(model=model,n_epochs=10,train_loader=train_loader,validation_loader=validation_loader,optimizer=optimizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Repeat the Process for the model with  batch norm \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_batch=CNN_batch(out_1=16, out_2=32)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "learning_rate = 0.1\n",
    "optimizer = torch.optim.SGD(model_batch.parameters(), lr = learning_rate)\n",
    "accuracy_list_batch, loss_list_batch=train_model(model=model_batch,n_epochs=10,train_loader=train_loader,validation_loader=validation_loader,optimizer=optimizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!--Empty Space for separating topics-->\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name=\"Result\"><h2 id=\"Result\">Analyze Results</h2> </a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the loss with both networks.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f6950248b50>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the loss and accuracy\n",
    "\n",
    "plt.plot(loss_list_normal, 'b',label='loss normal cnn ')\n",
    "plt.plot(loss_list_batch,'r',label='loss batch cnn')\n",
    "plt.xlabel('iteration')\n",
    "plt.title(\"loss\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(accuracy_list_normal, 'b',label=' normal CNN')\n",
    "plt.plot(accuracy_list_batch,'r',label=' CNN with Batch Norm')\n",
    "plt.xlabel('Epoch')\n",
    "plt.title(\"Accuracy \")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see the CNN with batch norm performers better, with faster convergence.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<a href=\"https://dataplatform.cloud.ibm.com/registration/stepone?utm_source=skills_network&utm_content=in_lab_content_link&utm_id=Lab-IBMDeveloperSkillsNetwork-DL0110EN-SkillsNetwork&context=cpdaas&apps=data_science_experience%2Cwatson_machine_learning\"><img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DL0110EN-SkillsNetwork/Template/module%201/images/Watson_Studio.png\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!--Empty Space for separating topics-->\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>About the Authors:</h2> \n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/\">Michelle Carey</a>, <a href=\"https://www.linkedin.com/in/jiahui-mavis-zhou-a4537814a\">Mavis Zhou</a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thanks to Magnus <a href=\"http://www.hvass-labs.org/\">Erik Hvass Pedersen</a> whose tutorials helped me understand convolutional Neural Network\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!--\n",
    "## Change Log\n",
    "\n",
    "|  Date (YYYY-MM-DD) |  Version | Changed By  |  Change Description |\n",
    "|---|---|---|---|\n",
    "| 2020-09-23  | 2.0  | Srishti  |  Migrated Lab to Markdown and added to course repo in GitLab |\n",
    "\n",
    "\n",
    "\n",
    "<hr>-->\n",
    "\n",
    "## <h3 align=\"center\"> &#169; IBM Corporation. All rights reserved. <h3/>\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "prev_pub_hash": "5d4e3382155a1f14ec0d9288e9da8f0bdf730499d9fe6abfe05894869af071e4"
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
